/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar_xpath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[17,42,77,89,91,92,93,94,95,96,97,98,101,102,103,104,105,106,109,112,119,122,124,135,136,140,141,147,164,165,166,167,168,170],$V1=[2,60],$V2=[1,7],$V3=[1,23],$V4=[1,24],$V5=[5,10,18,59,120],$V6=[5,10,13,18,20,59,90,120],$V7=[5,10,13,18,20,23,59,90,120],$V8=[5,10,13,18,20,23,26,59,60,66,67,68,69,70,71,72,73,74,90,120],$V9=[5,10,13,18,20,23,26,33,59,60,66,67,68,69,70,71,72,73,74,90,120],$Va=[5,10,13,18,20,23,26,33,35,59,60,66,67,68,69,70,71,72,73,74,90,120],$Vb=[5,10,13,18,20,23,26,33,35,38,39,59,60,66,67,68,69,70,71,72,73,74,90,120],$Vc=[5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,59,60,66,67,68,69,70,71,72,73,74,90,120],$Vd=[5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,59,60,66,67,68,69,70,71,72,73,74,90,120],$Ve=[5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,90,120],$Vf=[1,88],$Vg=[1,133],$Vh=[1,65],$Vi=[1,101],$Vj=[1,102],$Vk=[1,103],$Vl=[1,104],$Vm=[1,105],$Vn=[1,106],$Vo=[1,107],$Vp=[1,108],$Vq=[1,100],$Vr=[1,95],$Vs=[1,96],$Vt=[1,97],$Vu=[1,98],$Vv=[1,99],$Vw=[1,89],$Vx=[1,86],$Vy=[1,132],$Vz=[1,113],$VA=[1,94],$VB=[1,110],$VC=[1,111],$VD=[1,87],$VE=[1,112],$VF=[1,91],$VG=[1,114],$VH=[1,126],$VI=[1,130],$VJ=[1,129],$VK=[1,131],$VL=[1,128],$VM=[1,127],$VN=[17,38,39,42,77,89,91,92,93,94,95,96,97,98,101,102,103,104,105,106,109,112,119,122,124,135,136,140,141,147,164,165,166,167,168,170],$VO=[5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,90,120],$VP=[1,169],$VQ=[1,168],$VR=[5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,90,119,120],$VS=[2,137],$VT=[5,10,13,17,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,90,119,120,122],$VU=[1,175],$VV=[1,176],$VW=[1,174],$VX=[1,188],$VY=[1,189],$VZ=[1,186],$V_=[1,200],$V$=[1,210],$V01=[5,9,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,90,119,120,122],$V11=[5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,119,120],$V21=[1,218],$V31=[5,10,13,18,20,23,26,59,90,120],$V41=[1,236],$V51=[1,237],$V61=[1,238],$V71=[1,239],$V81=[1,240],$V91=[1,223],$Va1=[1,226],$Vb1=[17,42,77,89,91,92,93,94,95,96,97,98,101,102,103,104,105,106,109,112,119,124,135,136,140,141,147,164,165,166,167,168,170],$Vc1=[1,255],$Vd1=[2,123],$Ve1=[5,9,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,59,60,66,67,68,69,70,71,72,73,74,90,120,122],$Vf1=[13,18],$Vg1=[42,92,98,109,112,164,165,166,167,168,170],$Vh1=[2,207];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"XPath":4,"EOF":5,"Expr":6,"FunctionBody":7,"EnclosedExpr":8,"t_llave_izquierda":9,"t_llave_derecha":10,"ExprSingle":11,"Expr_recursivo":12,"t_coma":13,"IfExpr":14,"OrExpr":15,"t_if":16,"t_parentesis_izquierdo":17,"t_parentesis_derecho":18,"t_then":19,"t_else":20,"AndExpr":21,"OrExpr_recursivo":22,"t_or":23,"ComparisonExpr":24,"AndExpr_recursivo":25,"t_and":26,"StringConcatExpr":27,"ValueComp":28,"GeneralComp":29,"NodeComp":30,"RangeExpr":31,"StringConcatExpr_recursivo":32,"t_barra":33,"AdditiveExpr":34,"t_to":35,"MultiplicativeExpr":36,"AdditiveExpr_recursivo":37,"t_suma":38,"t_resta":39,"UnionExpr":40,"MultiplicativeExpr_recursivo":41,"t_multiplicacion":42,"t_div":43,"t_idiv":44,"t_mod":45,"IntersectExceptExpr":46,"InstanceofExpr":47,"TreatExpr":48,"t_instance":49,"t_of":50,"SequenceType":51,"CastableExpr":52,"t_treat":53,"t_as":54,"CastExpr":55,"ArrowExpr":56,"UnaryExpr":57,"ArrowExpr_recursivo":58,"t_igual":59,"t_mayor_que":60,"ArrowFunctionSpecifier":61,"ArgumentList":62,"UnaryExpr_recursivo":63,"ValueExpr":64,"SimpleMapExpr":65,"t_diferente":66,"t_menor_que":67,"t_eq":68,"t_ne":69,"t_lt":70,"t_le":71,"t_gt":72,"t_ge":73,"t_is":74,"PathExpr":75,"SimpleMapExpr_recursivo":76,"t_diagonal":77,"RelativePathExpr":78,"StepExpr":79,"RelativePathExpr_recursivo":80,"PostfixExpr":81,"AxisStep":82,"ReverseStep":83,"PredicateList":84,"ForwardStep":85,"ForwardAxis":86,"NodeTest":87,"AbbrevForwardStep":88,"t_child":89,"t_dos_puntos":90,"t_descendant":91,"t_attribute":92,"t_self":93,"t_descendant-or-self":94,"t_following-sibling":95,"t_following":96,"t_namespace":97,"t_arroba":98,"ReverseAxis":99,"AbbrevReverseStep":100,"t_parent":101,"t_ancestor":102,"t_preceding_sibling":103,"t_preceding":104,"t_ancestor_or_self":105,"t_punto":106,"KindTest":107,"NameTest":108,"StringLiteral":109,"Wildcard":110,"NCName":111,"t_node":112,"PrimaryExpr":113,"PostfixExpr_recursivo":114,"Predicate":115,"Lookup":116,"Argument":117,"ArgumentList_recursivo":118,"t_corchete_izquierdo":119,"t_corchete_derecho":120,"t_comilla":121,"t_interrogacion":122,"KeySpecifier":123,"IntegerLiteral":124,"ParenthesizedExpr":125,"EQName":126,"VarRef":127,"Literal":128,"ContextItemExpr":129,"FunctionItemExpr":130,"MapConstructor":131,"ArrayConstructor":132,"UnaryLookup":133,"NumericLiteral":134,"DecimalLiteral":135,"t_dolar":136,"VarName":137,"ArgumentPlaceholder":138,"InlineFunctionExpr":139,"t_function":140,"t_map":141,"MapConstructorEntry":142,"MapConstructor_recursivo":143,"SquareArrayConstructor":144,"CurlyArrayConstructor":145,"SquareArrayConstructor_recursivo":146,"t_array":147,"t_empty-sequence":148,"ItemType":149,"OccurrenceIndicator":150,"t_item":151,"FunctionTest":152,"MapTest":153,"ArrayTest":154,"ParenthesizedItemType":155,"DocumentTest":156,"ElementTest":157,"AttributeTest":158,"PITest":159,"CommentTest":160,"TextTest":161,"NamespaceNodeTest":162,"AnyKindTest":163,"t_document-node":164,"t_text":165,"t_comment":166,"t_namespace-node":167,"t_processing-instruction":168,"AttribNameOrWildcard":169,"t_element":170,"AnyFunctionTest":171,"TypedFunctionTest":172,"TypedFunctionTest_recursivo":173,"AnyMapTest":174,"AnyArrayTest":175,"TypedArrayTest":176,"QName":177,"PrefixedName":178,"UnprefixedName":179,"Prefix":180,"LocalPart":181,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"t_llave_izquierda",10:"t_llave_derecha",13:"t_coma",16:"t_if",17:"t_parentesis_izquierdo",18:"t_parentesis_derecho",19:"t_then",20:"t_else",23:"t_or",26:"t_and",33:"t_barra",35:"t_to",38:"t_suma",39:"t_resta",42:"t_multiplicacion",43:"t_div",44:"t_idiv",45:"t_mod",49:"t_instance",50:"t_of",53:"t_treat",54:"t_as",59:"t_igual",60:"t_mayor_que",66:"t_diferente",67:"t_menor_que",68:"t_eq",69:"t_ne",70:"t_lt",71:"t_le",72:"t_gt",73:"t_ge",74:"t_is",77:"t_diagonal",89:"t_child",90:"t_dos_puntos",91:"t_descendant",92:"t_attribute",93:"t_self",94:"t_descendant-or-self",95:"t_following-sibling",96:"t_following",97:"t_namespace",98:"t_arroba",101:"t_parent",102:"t_ancestor",103:"t_preceding_sibling",104:"t_preceding",105:"t_ancestor_or_self",106:"t_punto",109:"StringLiteral",112:"t_node",119:"t_corchete_izquierdo",120:"t_corchete_derecho",121:"t_comilla",122:"t_interrogacion",124:"IntegerLiteral",126:"EQName",135:"DecimalLiteral",136:"t_dolar",140:"t_function",141:"t_map",147:"t_array",148:"t_empty-sequence",151:"t_item",164:"t_document-node",165:"t_text",166:"t_comment",167:"t_namespace-node",168:"t_processing-instruction",170:"t_element"},
productions_: [0,[3,2],[4,1],[7,1],[8,3],[8,2],[6,2],[12,1],[12,2],[12,0],[11,1],[11,1],[14,8],[15,2],[22,1],[22,2],[22,0],[21,2],[25,1],[25,2],[25,0],[24,3],[24,3],[24,3],[24,1],[27,2],[32,1],[32,3],[32,2],[32,0],[31,3],[31,1],[34,2],[37,1],[37,2],[37,2],[37,0],[36,2],[41,1],[41,2],[41,2],[41,2],[41,2],[41,0],[40,1],[46,1],[47,4],[47,1],[48,4],[48,1],[52,1],[55,1],[56,2],[58,1],[58,4],[58,0],[57,2],[63,1],[63,1],[63,1],[63,0],[64,1],[29,1],[29,2],[29,1],[29,2],[29,1],[29,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[30,1],[30,2],[30,2],[65,2],[76,1],[76,2],[76,0],[75,2],[75,1],[75,3],[75,2],[75,1],[78,2],[80,1],[80,3],[80,4],[80,0],[79,1],[79,1],[82,2],[82,2],[85,2],[85,1],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[86,3],[88,2],[88,1],[83,2],[83,1],[99,3],[99,3],[99,3],[99,3],[99,3],[100,2],[100,1],[87,1],[87,1],[108,1],[108,1],[110,1],[110,3],[110,3],[110,2],[110,3],[81,2],[114,1],[114,1],[114,1],[114,1],[114,0],[62,4],[62,2],[118,1],[118,2],[118,0],[84,2],[84,0],[115,3],[115,4],[115,8],[116,2],[123,1],[123,1],[123,1],[123,1],[61,1],[61,1],[61,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[128,1],[128,1],[134,1],[134,1],[127,2],[137,1],[125,3],[125,2],[129,1],[117,1],[117,1],[138,1],[130,1],[139,6],[139,4],[131,5],[131,3],[143,1],[143,2],[143,0],[142,3],[132,1],[132,1],[144,4],[144,2],[146,1],[146,2],[146,0],[145,2],[133,2],[51,3],[51,2],[51,1],[150,1],[150,1],[150,1],[149,1],[149,3],[149,1],[149,1],[149,1],[149,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[163,3],[156,4],[156,3],[161,3],[160,3],[162,3],[159,4],[159,3],[158,4],[158,3],[169,1],[157,3],[152,1],[152,1],[171,4],[172,7],[172,5],[173,1],[173,2],[173,0],[153,1],[174,4],[154,1],[154,1],[175,4],[176,4],[155,3],[177,1],[177,1],[177,1],[178,3],[179,1],[180,1],[181,1],[111,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 8: case 11: case 24: case 31: case 44: case 45: case 47: case 49: case 50: case 51: case 56: case 61: case 81:
 this.$ = $$[$0] 
break;
case 4: case 6: case 13: case 17: case 25: case 32: case 37: case 52: case 77:
 this.$ = $$[$0-1] 
break;
case 46: case 48:
 this.$ = $$[$0-3] 
break;
case 157: case 158:
this.$ = new BusquedaUnaria($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,16:$V2,38:$V3,39:$V4}),{1:[3]},{5:[1,25]},{5:[2,2]},o($V5,[2,9],{12:26,13:[1,27]}),o($V6,[2,10]),o($V6,[2,11]),{17:[1,28]},o($V6,[2,16],{22:29,23:[1,30]}),o($V7,[2,20],{25:31,26:[1,32]}),o([5,10,13,18,20,23,26,90,120],[2,24],{28:33,29:34,30:35,59:[1,42],60:[1,45],66:[1,43],67:[1,44],68:[1,36],69:[1,37],70:[1,38],71:[1,39],72:[1,40],73:[1,41],74:[1,46]}),o($V8,[2,29],{32:47,33:[1,48]}),o($V9,[2,31],{35:[1,49]}),o($Va,[2,36],{37:50,38:[1,51],39:[1,52]}),o($Vb,[2,43],{41:53,42:[1,54],43:[1,55],44:[1,56],45:[1,57]}),o($Vc,[2,44]),o($Vc,[2,45]),o($Vc,[2,47],{49:[1,58]}),o($Vd,[2,49],{53:[1,59]}),o($Ve,[2,50]),o($Ve,[2,51]),o([5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,53,60,66,67,68,69,70,71,72,73,74,90,120],[2,55],{58:60,59:[1,61]}),{17:$Vf,42:$Vg,64:62,65:63,75:64,77:$Vh,78:66,79:67,81:68,82:69,83:71,85:72,86:83,87:109,88:84,89:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:81,100:82,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:115,108:116,109:$Vx,110:125,111:134,112:$Vy,113:70,119:$Vz,122:$VA,124:$VB,125:75,127:74,128:73,129:76,130:77,131:78,132:79,133:80,134:85,135:$VC,136:$VD,139:90,140:$VE,141:$VF,144:92,145:93,147:$VG,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM},o($V0,[2,58]),o($V0,[2,59]),{1:[2,1]},o($V5,[2,6]),o($V0,$V1,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:135,16:$V2,38:$V3,39:$V4}),o($V0,$V1,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:136,16:$V2,38:$V3,39:$V4}),o($V6,[2,13]),o($V0,$V1,{24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,21:137,38:$V3,39:$V4}),o($V7,[2,17]),o($V0,$V1,{27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,24:138,38:$V3,39:$V4}),o($V0,$V1,{31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,27:139,38:$V3,39:$V4}),o($V0,$V1,{31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,27:140,38:$V3,39:$V4}),o($V0,$V1,{31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,27:141,38:$V3,39:$V4}),o($VN,[2,68]),o($VN,[2,69]),o($VN,[2,70]),o($VN,[2,71]),o($VN,[2,72]),o($VN,[2,73]),o($VN,[2,62]),{59:[1,142]},o($VN,[2,64],{59:[1,143],67:[1,144]}),o($VN,[2,66],{59:[1,145],60:[1,146]}),o($VN,[2,74]),o($V8,[2,25]),o($V0,$V1,{34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,31:148,33:[1,147],38:$V3,39:$V4}),o($V0,$V1,{36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,34:149,38:$V3,39:$V4}),o($Va,[2,32]),o($V0,$V1,{40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,36:150,38:$V3,39:$V4}),o($V0,$V1,{40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,36:151,38:$V3,39:$V4}),o($Vb,[2,37]),o($V0,$V1,{46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,40:152,38:$V3,39:$V4}),o($V0,$V1,{46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,40:153,38:$V3,39:$V4}),o($V0,$V1,{46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,40:154,38:$V3,39:$V4}),o($V0,$V1,{46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,40:155,38:$V3,39:$V4}),{50:[1,156]},{54:[1,157]},o($Ve,[2,52]),{60:[1,158]},o($Ve,[2,56]),o($Ve,[2,61]),o([5,10,13,18,20,23,26,33,35,38,39,42,43,44,45,49,53,59,60,67,68,69,70,71,72,73,74,90,120],[2,80],{76:159,66:[1,160]}),o($Ve,[2,82],{79:67,81:68,82:69,113:70,83:71,85:72,128:73,127:74,125:75,129:76,130:77,131:78,132:79,133:80,99:81,100:82,86:83,88:84,134:85,139:90,144:92,145:93,87:109,107:115,108:116,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,110:125,111:134,78:161,17:$Vf,77:[1,162],89:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,109:$Vx,112:$Vy,119:$Vz,122:$VA,124:$VB,135:$VC,136:$VD,140:$VE,141:$VF,147:$VG,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM}),o($Ve,[2,85]),o($VO,[2,90],{80:163}),o($VO,[2,91]),o($VO,[2,92]),o($VO,[2,130],{114:164,115:165,62:166,116:167,17:$VP,119:$VQ,122:[1,170]}),o($VR,$VS,{84:171}),o($VR,$VS,{84:172}),o($VT,[2,149]),o($VT,[2,150]),o($VT,[2,151]),o($VT,[2,152]),o($VT,[2,153]),o($VT,[2,154]),o($VT,[2,155]),o($VT,[2,156]),{42:$Vg,87:173,92:$VU,98:$VV,107:115,108:116,109:$VW,110:125,111:134,112:$Vy,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM},o($VR,[2,108]),{42:$Vg,87:177,92:$VU,98:$VV,107:115,108:116,109:$VW,110:125,111:134,112:$Vy,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM},o($VR,[2,96]),o($VT,[2,157]),o($VT,[2,158]),{126:[1,179],137:178},o($V0,$V1,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:180,16:$V2,18:[1,181],38:$V3,39:$V4}),o($VT,[2,165],{106:[1,182]}),o($VT,[2,169]),{9:[1,183]},o($VT,[2,178]),o($VT,[2,179]),{17:$Vf,42:$VX,109:$VY,111:185,123:184,124:$VZ,125:187},{90:[1,190]},{90:[1,191]},{90:[1,192]},{90:[1,193]},{90:[1,194]},o([5,10,13,18,20,23,26,33,35,38,39,43,44,45,49,53,59,60,66,67,68,69,70,71,72,73,74,77,90,119,120],[2,115],{107:115,108:116,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,110:125,111:134,87:195,42:[1,196],92:$VU,98:$VV,109:$VW,112:$Vy,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM}),{90:[1,197]},{90:[1,198]},{17:$V_,90:[1,199]},{90:[1,201]},{90:[1,202]},{90:[1,203]},{90:[1,204]},{90:[1,205]},o($VR,[2,106]),o($VT,[2,159]),o($VT,[2,160]),{17:[1,206]},o($V0,$V1,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:207,16:$V2,38:$V3,39:$V4,120:[1,208]}),{8:209,9:$V$},o($VR,[2,116]),o($VR,[2,117]),o($V01,[2,199]),o($V01,[2,200]),o($V01,[2,201]),o($V01,[2,202]),o($V01,[2,203]),o($V01,[2,204]),o($V01,[2,205]),o($V01,[2,206]),o($VR,[2,119]),{17:[1,211]},{17:[1,212]},{17:[1,213]},{17:[1,214]},{17:[1,215]},{17:[1,216]},{17:[1,217]},o($V11,[2,120],{90:$V21}),{90:[1,219]},o($V5,[2,8]),{18:[1,220]},o($V6,[2,15]),o($V7,[2,19]),o($V31,[2,21]),o($V31,[2,22]),o($V31,[2,23]),o($VN,[2,63]),o($VN,[2,65]),o($VN,[2,75]),o($VN,[2,67]),o($VN,[2,76]),o($V0,$V1,{34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,31:221,38:$V3,39:$V4}),o($V8,[2,28]),o($V9,[2,30]),o($Va,[2,34]),o($Va,[2,35]),o($Vb,[2,39]),o($Vb,[2,40]),o($Vb,[2,41]),o($Vb,[2,42]),{17:$V41,51:222,92:$VU,107:225,112:$V51,140:$V61,141:$V71,147:$V81,148:$V91,149:224,151:$Va1,152:227,153:228,154:229,155:230,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM,171:231,172:232,174:233,175:234,176:235},{17:$V41,51:241,92:$VU,107:225,112:$V51,140:$V61,141:$V71,147:$V81,148:$V91,149:224,151:$Va1,152:227,153:228,154:229,155:230,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM,171:231,172:232,174:233,175:234,176:235},{17:$Vf,61:242,125:244,126:[1,243],127:245,136:$VD},o($Ve,[2,77]),{17:$Vf,42:$Vg,75:246,77:$Vh,78:66,79:67,81:68,82:69,83:71,85:72,86:83,87:109,88:84,89:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:81,100:82,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:115,108:116,109:$Vx,110:125,111:134,112:$Vy,113:70,119:$Vz,122:$VA,124:$VB,125:75,127:74,128:73,129:76,130:77,131:78,132:79,133:80,134:85,135:$VC,136:$VD,139:90,140:$VE,141:$VF,144:92,145:93,147:$VG,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM},o($Ve,[2,81]),o($Ve,[2,84],{79:67,81:68,82:69,113:70,83:71,85:72,128:73,127:74,125:75,129:76,130:77,131:78,132:79,133:80,99:81,100:82,86:83,88:84,134:85,139:90,144:92,145:93,87:109,107:115,108:116,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,110:125,111:134,78:247,17:$Vf,89:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,109:$Vx,112:$Vy,119:$Vz,122:$VA,124:$VB,135:$VC,136:$VD,140:$VE,141:$VF,147:$VG,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM}),o($Ve,[2,86],{77:[1,248]}),o($VO,[2,125]),o($VO,[2,127]),o($VO,[2,128]),o($VO,[2,129]),o([17,42,77,89,91,92,93,94,95,96,97,101,102,103,104,105,106,109,112,119,122,124,135,136,140,141,147,164,165,166,167,168,170],$V1,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:249,16:$V2,38:$V3,39:$V4,98:[1,250]}),o($Vb1,$V1,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,117:251,11:253,138:254,16:$V2,18:[1,252],38:$V3,39:$V4,122:$Vc1}),{17:$Vf,42:$VX,109:$VY,111:185,123:256,124:$VZ,125:187},o($VO,[2,93],{115:257,119:$VQ}),o($VO,[2,94],{115:257,119:$VQ}),o($VR,[2,107]),o($VR,[2,118]),{17:$V_},{42:[1,258]},o($VR,[2,95]),o($VT,[2,161]),o($VT,[2,162]),{18:[1,259]},o($VT,[2,164]),o($VR,[2,114]),o($V0,$V1,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,142:260,11:262,10:[1,261],16:$V2,38:$V3,39:$V4}),o($VT,[2,186]),o($VT,[2,142]),o($VT,[2,143]),o($VT,[2,144]),o($VT,[2,145]),o($VT,[2,241]),{90:[1,263]},{90:[1,264]},{90:[1,265]},{90:[1,266]},{90:[1,267]},o($VR,[2,105]),o($V11,$Vd1,{90:$V21}),{90:[1,268]},{90:[1,269]},{90:[1,270]},{18:[1,272],42:[1,273],169:271},{90:[1,274]},{90:[1,275]},{90:[1,276]},{90:[1,277]},{90:[1,278]},{18:[1,279]},{13:[1,281],120:[2,184],146:280},o($VT,[2,181]),o($VT,[2,185]),o($V0,$V1,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:282,10:[1,283],16:$V2,38:$V3,39:$V4}),{18:[1,285],157:284,170:$VM},{18:[1,286]},{18:[1,288],109:[1,287]},{18:[1,289]},{18:[1,290]},{18:[1,291]},{18:[1,292]},{109:$VY,111:293},{42:[1,294]},{19:[1,295]},o($V8,[2,27]),o($Vc,[2,46]),{17:[1,296]},o([5,9,10,13,18,20,23,26,33,35,39,43,44,45,49,59,60,66,67,68,69,70,71,72,73,74,90,120],[2,189],{150:297,38:[1,300],42:[1,299],122:[1,298]}),o($Ve1,[2,193]),{17:[1,301]},o($Ve1,[2,195]),o($Ve1,[2,196]),o($Ve1,[2,197]),o($Ve1,[2,198]),o($Ve1,[2,219]),o($Ve1,[2,220]),o($Ve1,[2,227]),o($Ve1,[2,229]),o($Ve1,[2,230]),{17:$V41,92:$VU,107:225,112:$V51,140:$V61,141:$V71,147:$V81,149:302,151:$Va1,152:227,153:228,154:229,155:230,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM,171:231,172:232,174:233,175:234,176:235},{17:[1,303]},{17:[1,304]},{17:[1,305]},{17:[1,306]},o($Vd,[2,48]),{17:$VP,62:307},{17:[2,146]},{17:[2,147]},{17:[2,148]},o($Ve,[2,79]),o($Ve,[2,83]),{17:$Vf,42:$Vg,77:[1,309],79:308,81:68,82:69,83:71,85:72,86:83,87:109,88:84,89:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:81,100:82,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:115,108:116,109:$Vx,110:125,111:134,112:$Vy,113:70,119:$Vz,122:$VA,124:$VB,125:75,127:74,128:73,129:76,130:77,131:78,132:79,133:80,134:85,135:$VC,136:$VD,139:90,140:$VE,141:$VF,144:92,145:93,147:$VG,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM},{120:[1,310]},o($V0,$V1,{11:4,14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,6:311,16:$V2,38:$V3,39:$V4}),{13:[1,313],18:[2,135],118:312},o($VO,[2,132]),o($Vf1,[2,166]),o($Vf1,[2,167]),o($Vf1,[2,168]),o($VO,[2,141]),o($VR,[2,136]),o($VR,$Vd1),o($VT,[2,163]),{10:[2,176],13:[1,315],143:314},o($VT,[2,173]),{90:[1,316]},o($Vg1,[2,109]),o($Vg1,[2,110]),o($Vg1,[2,111]),o($Vg1,[2,112]),o($Vg1,[2,113]),o($Vg1,[2,97]),o($Vg1,[2,98]),o($Vg1,[2,99]),{18:[1,317]},o($V01,[2,216]),{18:[2,217]},o($Vg1,[2,100]),o($Vg1,[2,101]),o($Vg1,[2,102]),o($Vg1,[2,103]),o($Vg1,[2,104]),{7:319,8:320,9:$V$,54:[1,318]},{120:[1,321]},o($V0,$V1,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:322,16:$V2,38:$V3,39:$V4}),{10:[1,323]},o($VT,[2,5]),{18:[1,324]},o($V01,[2,209]),o($V01,[2,218]),{18:[1,325]},o($V01,[2,214]),o($V01,[2,211]),o($V01,[2,210]),o($V01,[2,212]),o($VR,$Vh1),o($VR,[2,122]),o($VR,[2,121]),o($V0,$V1,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:326,16:$V2,38:$V3,39:$V4}),{18:[1,327]},o($Ve1,[2,188]),o($Ve1,[2,190]),o($Ve1,[2,191]),o($Ve1,[2,192]),{18:[1,328]},{18:[1,329]},{18:[1,330]},{17:$V41,18:[1,333],42:[1,331],51:332,92:$VU,107:225,112:$V51,140:$V61,141:$V71,147:$V81,148:$V91,149:224,151:$Va1,152:227,153:228,154:229,155:230,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM,171:231,172:232,174:233,175:234,176:235},{42:[1,334]},{17:$V41,42:[1,335],51:336,92:$VU,107:225,112:$V51,140:$V61,141:$V71,147:$V81,148:$V91,149:224,151:$Va1,152:227,153:228,154:229,155:230,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM,171:231,172:232,174:233,175:234,176:235},o($Ve,[2,54]),o($VO,[2,88]),{17:$Vf,42:$Vg,79:337,81:68,82:69,83:71,85:72,86:83,87:109,88:84,89:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:$Vo,97:$Vp,98:$Vq,99:81,100:82,101:$Vr,102:$Vs,103:$Vt,104:$Vu,105:$Vv,106:$Vw,107:115,108:116,109:$Vx,110:125,111:134,112:$Vy,113:70,119:$Vz,122:$VA,124:$VB,125:75,127:74,128:73,129:76,130:77,131:78,132:79,133:80,134:85,135:$VC,136:$VD,139:90,140:$VE,141:$VF,144:92,145:93,147:$VG,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM},o($VR,[2,138]),{59:[1,339],120:[1,338]},{18:[1,340]},o($Vb1,$V1,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:253,138:254,117:341,16:$V2,38:$V3,39:$V4,122:$Vc1}),{10:[1,342]},o($V0,$V1,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:262,142:343,16:$V2,38:$V3,39:$V4}),o($V0,$V1,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:344,16:$V2,38:$V3,39:$V4}),o($V01,[2,215]),{17:$V41,51:345,92:$VU,107:225,112:$V51,140:$V61,141:$V71,147:$V81,148:$V91,149:224,151:$Va1,152:227,153:228,154:229,155:230,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM,171:231,172:232,174:233,175:234,176:235},o($VT,[2,171]),o($VT,[2,3]),o($VT,[2,180]),{120:[2,183]},o($VT,[2,4]),o($V01,[2,208]),o($V01,[2,213]),{20:[1,346]},o($Ve1,[2,187]),o($Ve1,[2,194]),o($Ve1,[2,233]),o($Ve1,$Vh1),{18:[1,347]},{13:[1,349],18:[2,226],173:348},{54:[1,350]},{18:[1,351]},{18:[1,352]},{18:[1,353]},o($VO,[2,89]),o($VR,[2,139]),{121:[1,354]},o($VO,[2,131]),{18:[2,134]},o($VT,[2,172]),{10:[2,175]},o([10,13],[2,177]),{7:355,8:320,9:$V$},o($V0,$V1,{14:5,15:6,21:8,24:9,27:10,31:11,34:12,36:13,40:14,46:15,47:16,48:17,52:18,55:19,56:20,57:21,63:22,11:356,16:$V2,38:$V3,39:$V4}),o($Ve1,[2,221]),{18:[1,357]},{17:$V41,51:358,92:$VU,107:225,112:$V51,140:$V61,141:$V71,147:$V81,148:$V91,149:224,151:$Va1,152:227,153:228,154:229,155:230,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM,171:231,172:232,174:233,175:234,176:235},{17:$V41,51:359,92:$VU,107:225,112:$V51,140:$V61,141:$V71,147:$V81,148:$V91,149:224,151:$Va1,152:227,153:228,154:229,155:230,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM,171:231,172:232,174:233,175:234,176:235},o($Ve1,[2,228]),o($Ve1,[2,231]),o($Ve1,[2,232]),{109:[1,360]},o($VT,[2,170]),o($V6,[2,12]),{54:[1,361]},{18:[2,225]},o($Ve1,[2,223]),{121:[1,362]},{17:$V41,51:363,92:$VU,107:225,112:$V51,140:$V61,141:$V71,147:$V81,148:$V91,149:224,151:$Va1,152:227,153:228,154:229,155:230,156:117,157:118,158:119,159:120,160:121,161:122,162:123,163:124,164:$VH,165:$VI,166:$VJ,167:$VK,168:$VL,170:$VM,171:231,172:232,174:233,175:234,176:235},{120:[1,364]},o($Ve1,[2,222]),o($VR,[2,140])],
defaultActions: {3:[2,2],25:[2,1],243:[2,146],244:[2,147],245:[2,148],273:[2,217],322:[2,183],341:[2,134],343:[2,175],358:[2,225]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {BusquedaUnaria} = require("../xpath/instrucciones/BusquedaUnaria");    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 13;
break;
case 1:return 't_for';
break;
case 2:return 't_let';
break;
case 3:return 't_some';
break;
case 4:return 't_every';
break;
case 5:return 16;
break;
case 6:return 23;
break;
case 7:return 26;
break;
case 8:return 68;
break;
case 9:return 69;
break;
case 10:return 70;
break;
case 11:return 71;
break;
case 12:return 72;
break;
case 13:return 73;
break;
case 14:return 59;
break;
case 15:return 66;
break;
case 16:return 67;
break;
case 17:return 60;
break;
case 18:return 74;
break;
case 19:return 33;
break;
case 20:return 35;
break;
case 21:return 38;
break;
case 22:return 39;
break;
case 23:return 42;
break;
case 24:return 43;
break;
case 25:return 44;
break;
case 26:return 45;
break;
case 27:return 't_union';
break;
case 28:return 't_except';
break;
case 29:return 49;
break;
case 30:return 50;
break;
case 31:return 53;
break;
case 32:return 54;
break;
case 33:return 't_castable';
break;
case 34:return 't_cast';
break;
case 35:return 77;
break;
case 36:return 90;
break;
case 37:return 106;
break;
case 38:return 98;
break;
case 39:return 119;
break;
case 40:return 120;
break;
case 41:return 17;
break;
case 42:return 18;
break;
case 43:return 9;
break;
case 44:return 10;
break;
case 45:return 't_comillas';
break;
case 46:return 121;
break;
case 47:return 136;
break;
case 48:return 't_modulo';
break;
case 49:return 't_numeral';
break;
case 50:return 't_return';
break;
case 51:return 't_in';
break;
case 52:return 't_satisfies';
break;
case 53:return 19;
break;
case 54:return 20;
break;
case 55:return 89;
break;
case 56:return 91;
break;
case 57:return 92;
break;
case 58:return 93;
break;
case 59:return 94;
break;
case 60:return 95;
break;
case 61:return 96;
break;
case 62:return 97;
break;
case 63:return 101;
break;
case 64:return 102;
break;
case 65:return 103;
break;
case 66:return 't_preceding-sibling';
break;
case 67:return 104;
break;
case 68:return 105;
break;
case 69:return 140;
break;
case 70:return 141;
break;
case 71:return 147;
break;
case 72:return 148;
break;
case 73:return 151;
break;
case 74:return 112;
break;
case 75:return 165;
break;
case 76:return 164;
break;
case 77:return 166;
break;
case 78:return 167;
break;
case 79:return 168;
break;
case 80:return 't_schema-attribute';
break;
case 81:return 170;
break;
case 82:return 't_schema-element';
break;
case 83:return 122;
break;
case 84:return 't_Q';
break;
case 85:return 't_doble_comillas';
break;
case 86:return 't_doble_comilla';
break;
case 87:return 't_not';
break;
case 88:return 135;
break;
case 89:return 124;
break;
case 90:return 109;
break;
case 91:return 5;
break;
case 92: console.error('Error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', y columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+,)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:some\b)/,/^(?:every\b)/,/^(?:if\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:=)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:is\b)/,/^(?:\|)/,/^(?:to\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:idiv\b)/,/^(?:mod\b)/,/^(?:union\b)/,/^(?:except\b)/,/^(?:instance\b)/,/^(?:of\b)/,/^(?:treat\b)/,/^(?:as\b)/,/^(?:castable\b)/,/^(?:cast\b)/,/^(?:\/)/,/^(?::)/,/^(?:\.)/,/^(?:@)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:")/,/^(?:')/,/^(?:\$)/,/^(?:%)/,/^(?:#)/,/^(?:return\b)/,/^(?:in\b)/,/^(?:satisfies\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:attribute\b)/,/^(?:self\b)/,/^(?:descendant-or-self\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:ancestor\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:ancestor-or-self\b)/,/^(?:function\b)/,/^(?:map\b)/,/^(?:array\b)/,/^(?:empty-sequence\b)/,/^(?:item\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:document-node\b)/,/^(?:comment\b)/,/^(?:namespace-node\b)/,/^(?:processing-instruction\b)/,/^(?:schema-attribute\b)/,/^(?:element\b)/,/^(?:schema-element\b)/,/^(?:\?)/,/^(?:Q\b)/,/^(?:x\b)/,/^(?:y\b)/,/^(?:not\b)/,/^(?:(([0-9]+\.[0-9])|(\.\[0-9\]\+)))/,/^(?:[0-9]+)/,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar_xpath;
exports.Parser = Grammar_xpath.Parser;
exports.parse = function () { return Grammar_xpath.parse.apply(Grammar_xpath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}